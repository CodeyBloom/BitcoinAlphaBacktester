name: Update Bitcoin Data and Optimizations

on:
  schedule:
    # Run weekly on Monday at 2:00 UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update_data_and_optimize:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Set a reasonable timeout for the entire job
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper git operations
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Fetch Bitcoin historical data (AUD only) using CryptoCompare API
        id: fetch_data
        run: |
          echo "::group::Fetching Bitcoin Data"
          python scripts/fetch_cryptocompare_data.py --currency AUD --years 10 --output data/bitcoin_prices.arrow
          echo "::endgroup::"
        continue-on-error: false  # Fail the workflow if we can't get data
      
      # Even if real optimizations fail, we'll have fallback sample optimizations
      - name: Generate sample optimizations for predefined time periods
        if: steps.fetch_data.outcome == 'success'
        run: |
          echo "::group::Generating Sample Optimizations"
          python scripts/generate_optimizations_for_periods.py
          echo "::endgroup::"
        continue-on-error: true
        
      # Real optimizations based on actual data
      - name: Run real optimizations using historical data (1 Year)
        if: steps.fetch_data.outcome == 'success'
        id: optimize_1yr
        run: |
          echo "::group::Running 1-Year Optimizations"
          python scripts/run_real_optimizations.py --years 1
          echo "::endgroup::"
        continue-on-error: true  # Continue even if some optimizations fail
        
      - name: Run real optimizations using historical data (5 Years)
        if: steps.fetch_data.outcome == 'success'
        id: optimize_5yr
        run: |
          echo "::group::Running 5-Year Optimizations"
          python scripts/run_real_optimizations.py --years 5
          echo "::endgroup::"
        continue-on-error: true  # Continue even if some optimizations fail
        
      - name: Run real optimizations using historical data (10 Years)
        if: steps.fetch_data.outcome == 'success'
        id: optimize_10yr
        run: |
          echo "::group::Running 10-Year Optimizations"
          python scripts/run_real_optimizations.py --years 10
          echo "::endgroup::"
        continue-on-error: true  # Continue even if some optimizations fail
      
      # Log optimization status
      - name: Log optimization status
        run: |
          echo "1-Year optimization status: ${{ steps.optimize_1yr.outcome }}"
          echo "5-Year optimization status: ${{ steps.optimize_5yr.outcome }}"
          echo "10-Year optimization status: ${{ steps.optimize_10yr.outcome }}"
      
      - name: Commit and push if there are changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add data/
          git diff --staged --quiet || git commit -m "Update Bitcoin data and optimization results"
          git push
        
      - name: Verify data integrity
        run: |
          echo "::group::Data Integrity Verification"
          python scripts/verify_data_integrity.py --output data/last_verification.json
          echo "::endgroup::"
          
      - name: Commit verification results
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add data/last_verification.json
          git diff --staged --quiet || git commit -m "Add data verification results" && git push
          
      - name: Create verification summary
        if: always()
        run: |
          echo "::group::Verification Summary"
          echo "Bitcoin data update process complete"
          echo "Price data file:"
          ls -la data/bitcoin_prices.arrow || echo "Missing price data file!"
          echo "Optimization files count:"
          find data/optimizations -name "*.arrow" | wc -l
          echo "Recent verification results:"
          cat data/last_verification.json | grep -E "overall_valid|valid_count|missing_count" || echo "No verification results available"
          echo "::endgroup::"